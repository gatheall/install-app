#!/usr/bin/perl -w
#
# ----------------------------------------------------------------------
# install-app
#
# Written by George A. Theall, theall@tifaware.com
#
# Copyright (c) 2003-2016, George A. Theall. All rights reserved.
#
# This module is free software; you can redistribute it and/or modify
# it under the same terms as Perl itself.
# ---------------------------------------------------------------------


=head1 NAME

install-app - Install applications.


=head1 SYNOPSIS

  # retrieves / builds / installs OpenSSL 0.9.7a.
  install-app openssl 0.9.7a

  # same as above but do it in batch.
  install-app -b openssl 0.9.7a

  # lists steps involved in building / installing OpenSSL 0.9.7a.
  install-app -l openssl 0.9.7a

  # lists supported applications.
  install-app --list-apps


=head1 DESCRIPTION

This script removes much of the drudgery associated with installing and
upgrading software.  It supports retrieving distribution files as well
as configuring / compiling / installing arbitrary software applications. 
Unlike package managers such as Red Hat's B<rpm>, Debian's B<dpkg>,
Sun's B<pkgadd>, etc., B<install-app> works typically with a
application's source, giving you complete flexibility in terms of
configuration and installation.  Indeed, the flexibility is such that
you can even use it with your OS' package manager.  [Another difference
I<vis-a-vis> B<install-app> and package managers is that B<install-app>
does not itself support dependencies among applications or application
removals.]

For each application you wish to support with this script, you must have
a special file -- an I<application info file> -- containing information
about the application: where the distribution file is located, how to
verify its integrity, how to compile the application, etc.  Application
info files reside in the directory specified by C<$apps_dir> in the
script. 

You specify applications to install / upgrade on the commandline as one
or more name / version number pairs.  For each application,
B<install-app> will read the corresponding application info file and
then use the information it obtains to retrieve the appropriate
distribution file, verify its integrity, extract it, and configure /
compile / install the application.  At each step, you will be prompted
to continue to the next step or skip it. 

Some of the other settings you may wish to adjust include:

    Variable            Commandline         Purpose
    n/a                 -b|--batch          Don't ask any questions. NB:
                                                you may still be prompted
                                                by the programs you are
                                                actually running.
    $DEBUG              -d|--debug          Turn on debugging. NB: installs
                                                still occur.
    n/a                 -a|--list-apps      List the applications supported
                                                on this system.
    n/a                 -l|--list-steps     List the steps to make and
                                                install the application but
                                                don't actually do them.

B<install-app> requires Perl 5 along with the following modules:

    o Carp
    o File::Find
    o Getopt::Long
    o LWP::Debug
    o LWP::UserAgent
    o Text::Wrap
    o XML::Twig

If your system does not have these modules installed already, visit CPAN
(L<http://search.cpan.org/>).  Note that C<LWP::Debug>,
C<LWP::UserAgent>, and C<XML::Twig> are not included with the default
Perl distribution so you may need to install them yourself.  Also note
that C<XML::Twig> itself requires the Expat XML parser library
(L<http://expat.sourceforge.net/>). 


=head1 KNOWN BUGS AND CAVEATS

Currently, I am not aware of any bugs in this script.  

The application info files contain arbitrary commands that are run as
root.  Be careful about what you put in them, and be careful about their
ownership / permissions. 

Make sure you set C<$ENV{'FTP_PASSIVE'}> in the script if your firewall
requires passive mode for FTP file transfers. 

You may sometimes be prompted for information while running
B<install-app>, even when using its batch option (eg, C<-b>).  By
carefully choosing the steps followed in an application info file, you
can minimize or even eliminate the need for user interaction.  For
instance, don't have a step that invokes C<vi> to edit a makefile;
instead, use C<sed> to edit a it in place.  Also, note that
B<install-app> sets the environment variable C<INSTALL_APP_MODE> to
C<batch> if running in batch mode so you have a step that, say, allows
you to page through a changelog only if running interactively. 

If you encounter a problem using B<install-app>, I encourage you to
enable debug mode (eg, add C<-d> to your commandline) and examine the
output it produces before contacting me.  Often, this will enable you to
resolve the problem yourself. 


=head1 DIAGNOSTICS

Fatal errors will be reported using croak.


=head1 SEE ALSO

L<https://github.com/gatheall/lsappi>,
L<https://github.com/gatheall/install-app>,

=cut


############################################################################
# Make sure we have access to the required modules.
use 5;
use strict;
use Carp;
use File::Find;
use Getopt::Long;
use LWP::UserAgent;
use XML::Twig;


############################################################################
# Initialize variables.
# 
# - these you may wish to tweak.
delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};   # Make %ENV safer
$ENV{PATH} = '/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin';
my $DEBUG = 0;                          # debugging messages?
my $apps_dir = '/var/local/apps';       # where application information is stored
# nb: sample http proxy settings
#     - no proxy.
my $proxy = '';
#     - unauthenticated proxy via proxy1.domain.com.
# my $proxy = 'http://proxy1.domain.com';
#     - authenticated as user 'user' w/ password 'pass' via proxy2.domain.com.
# my $proxy = 'http://user:pass@proxy2.domain.com';

# - these you probably don't need to muck with.
$| = 1;
$ENV{'FTP_PASSIVE'} = 0;                # change to 1 if passive mode needed
my $timeout = 120;                      # timeout used w/ http GET
my $useragent = 'install-app (https://github.com/gatheall/install-app)';
my $work_uid = 0;                       # uid for work files / dirs
my $work_gid = 0;                       # gid for work files / dirs
umask 022;

# Subroutine prototypes.
sub retrieve_URL($$);


############################################################################
# Process commandline arguments.
my %options = (
    'debug'  => \$DEBUG,
);
Getopt::Long::Configure('bundling');
GetOptions(
    \%options,
    'batch|b!',
    'debug|d!',
    'help|h|?!',
    'list-apps|a!',
    'list-steps|l!',
) or $options{help} = 1;
$options{help} = 1 if (scalar(@ARGV) % 2);
$0 =~ s/^.+\///;
if ($options{help}) {
    warn "\n",
        "Usage: $0 [options] application1 version1 [application2 version2 ...]\n",
        "\n",
        "Options:\n",
        "  -?, -h, --help             Display this help and exit.\n",
        "  -a, --list-apps            List the applications supported on this system\n",
        "                               and exit.\n",
        "  -b, --batch                Don't ask questions. NB: you may still be\n",
        "                               prompted by the programs you are actually\n",
        "                               running.\n",
        "  -d, --debug                Display debugging messages while running. NB:\n",
        "                               installs still occur.\n",
        "  -l, --list-steps           List the steps to make and install the\n",
        "                               application but don't actually do them.\n";
    exit(9);
}
$ENV{'INSTALL_APP_MODE'} = ($options{batch}) ? 'batch' : 'interactive';

chdir $apps_dir or croak "Can't change directory to '$apps_dir' - $!\n";


############################################################################
# List applications if desired and exit.
if ($options{'list-apps'}) {
    warn "debug: scanning files in '$apps_dir':\n" if $DEBUG;
    my @apps;
    find(
        { wanted => sub {
                if ($File::Find::dir eq '.' and /^\.\/(.+)\.xml$/) {
                    warn "debug:   $1.xml\n" if $DEBUG;
                    push(@apps, $1);
                }
            },
            no_chdir => 1,
            untaint => 1,
        },
        '.'
    );

    print "Known applications:\n";
    foreach (sort @apps) {
        print "  $_\n";
    }
    exit;
}


############################################################################
# Process rest of commandline arguments (ie, application / version pairs).
while (@ARGV) {
    my $app_name = shift(@ARGV);
    my $app_vers = shift(@ARGV) || croak "Whoa -- expected a version number!\n";
    warn "debug: installing $app_name $app_vers.\n" if $DEBUG;

    # Read / parse XML file.
    #
    # nb: perhaps at some point I'll add a DTD so it'll be possible
    #     to validate the XML.
    my $app_file = "$apps_dir/$app_name.xml";
    warn "debug:   reading application info from '$app_file'.\n" if $DEBUG;
    my $twig=XML::Twig->new;
    unless ($twig->safe_parsefile($app_file)) {
        if ($@ =~ /No such file/) {
            warn "Don't know about the application '$app_name'!\n";
        }
        else {
            warn join(" ", split(/\n/, $@)), "\n";
        }
        next;
    }

    # Identify element used for application or its components.
    my $root = $twig->root;
    unless ($root->children_count('install')) {
        warn "No install element found in '$app_file'; skipped.\n";
        next;
    }
    my $install = $root->first_child('install');

    my(@apps, %twig_elements);
    if ($install->children_count('component')) {
        # nb: keep track of application element even if there are 
        #     components since some elements can be in either; eg,
        #     durl, verify, vurl.
        $twig_elements{$app_name} = $install;
        foreach my $component ($install->children('component')) {
            my $comp_name = $component->first_child('name')->text;
            push(@apps, "$app_name / $comp_name");
            $twig_elements{"$app_name / $comp_name"} = $component->copy;
        }
    }
    else {
        push(@apps, $app_name);
        $twig_elements{$app_name} = $install;
    }

    # Process chosen application(s) / component(s).
    foreach my $app (@apps) {
        warn "debug:   processing '$app'.\n" if ($DEBUG);
        my $twig = $twig_elements{$app};

        # Create hash with application info and decode special characters.
        my $info;
        warn "debug:     application info:\n" if ($DEBUG);
        # - selected scalars.
        #   nb: order is important first since some strings
        #       may end up encoded in others.
        foreach my $tag ('name', 'distfile', 'workdir', 'basedir', 'durl', 'preextract', 'postextract', 'verify', 'vurl') {
            my $val;
            if ($twig->children_count($tag)) {
                $val = $twig->first_child($tag)->text;
            }
            elsif ($app =~ / \/ / and $twig_elements{$app_name}->children_count($tag)) {
                $val = ($twig_elements{$app_name})->first_child($tag)->text;
            }
            elsif ($tag eq 'name' and $root->children_count($tag)) {
                $val = $root->first_child($tag)->text;
            }
            if ($val) {
                # Decode scalars with special characters.
                if ($val =~ /%/) {
                    warn "debug:       $tag = '$val' (before)\n" if $DEBUG;
                    $val =~ s/%a/$app_name/g;
                    $val =~ s/%b/$info->{basedir}/g;
                    $val =~ s/%f/$info->{distfile}/g;
                    $val =~ s/%n/$info->{name}/g;
                    $val =~ s/%v/$app_vers/g;
                    $val =~ s/%w/$info->{workdir}/g;
                }
                warn "debug:       $tag = '$val'\n" if $DEBUG;
                $info->{$tag} = $val;
            }
        }
        # - steps.
        foreach my $step ($twig->children('step')) {
            my $label = $step->first_child('label')->text;
            my $action = $step->first_child('action')->text;
            # Decode special characters.
            if ($label =~ /%/) {
                warn "debug:       label = '$label' (before)\n" if $DEBUG;
                $label =~ s/%a/$app_name/g;
                $label =~ s/%b/$info->{basedir}/g;
                $label =~ s/%f/$info->{distfile}/g;
                $label =~ s/%n/$info->{name}/g;
                $label =~ s/%v/$app_vers/g;
                $label =~ s/%w/$info->{workdir}/g;
            }
            warn "debug:       step label = '$label'\n" if $DEBUG;
            if ($action =~ /%/) {
                warn "debug:           action = '$action' (before)\n" if $DEBUG;
                $action =~ s/%a/$app_name/g;
                $action =~ s/%b/$info->{basedir}/g;
                $action =~ s/%f/$info->{distfile}/g;
                $action =~ s/%n/$info->{name}/g;
                $action =~ s/%v/$app_vers/g;
                $action =~ s/%w/$info->{workdir}/g;
            }
            warn "debug:           action = '$action'\n" if $DEBUG;
            push(@{$info->{steps}}, {$label => $action});
        }

        # List steps and exit if desired.
        if ($options{'list-steps'}) {
            use Text::Wrap;
            $Text::Wrap::columns = 75;
            my $i = 0;
            print "\n" unless ($app eq $apps[0]);
            print "Steps to install $app:\n\n";
            foreach my $step (@{$info->{steps}}) {
                my($label, $action);
                while (($label, $action) = each %$step) {
                    print wrap('', '     ', 
                        sprintf "%3d) %s by running '%s'.", ++$i, $label, $action),
                        "\n";
                }
            }
            if (exists $info->{durl}) {
                my $msg = "Note: $info->{distfile} will be retrieved from $info->{durl} as necessary; ";
                if ($info->{verify}) {
                    $msg .= "it will be verified using a ";
                    $msg .= "MD5 checksum" if ($info->{verify} eq 'md5');
                    $msg .= "SHA1 checksum" if ($info->{verify} eq 'sha1');
                    $msg .= "SHA256 checksum" if ($info->{verify} eq 'sha256');
                    $msg .= "GnuPG / PGP signature" if ($info->{verify} eq 'sig');
                    if (exists $info->{vurl}) {
                        $msg .= " from $info->{vurl}";
                    }
                    $msg .= '.';
                }
                else {
                    $msg .= "no method is known for verifying its contents.";
                }
                print "\n",
                    wrap('', '', $msg), "\n";
            }
            next;
        }

        # Change into basedir, creating it as necessary.
        unless (-d $info->{basedir}) {
            warn "Creating " . $info->{basedir} . "!\n";
            mkdir $info->{basedir};
            chown $work_uid, $work_gid, $info->{basedir};
        }
        chdir $info->{basedir} 
            or croak "Can't chdir to $info->{basedir} - $!\n";

        # Retrieve distribution file if it's not yet available.
        my $distfile = $info->{distfile};
        if (! -f $distfile) {
            warn "debug:     retrieving distribution file.\n" if $DEBUG;
            my $url;
            if (!($url = $info->{durl})) {
                croak "$distfile not found in $info->{basedir} and durl not configured!\n";
            }
            if ($_ = retrieve_URL($url, $distfile)) {
                croak "Can't retrieve '$url' - $_!\n";
            }
        }

        # Verify contents of distribution file, if possible.
        if (exists $info->{verify} and $info->{verify}) {
            warn "debug:     verifying distribution file.\n" if $DEBUG;
            my $meth = $info->{verify};
            if ($meth eq 'md5') {
                my $md5 = $distfile . '.md5';

                # if checksum doesn't exist, try to retrieve it.
                if (!-f $md5) {
                    warn "debug:       $md5 does not exist locally.\n" if $DEBUG;
                    if (exists $info->{vurl}) {
                        if ($_ = retrieve_URL($info->{vurl}, $md5)) {
                            # nb: give user chance to continue.
                            warn "Note: can't retrieve '$info->{vurl}' - $_.\n";
                        }
                        # Reformat if necessary.
                        my($line, $nlines, $reformat);
                        open(MD5, $md5) or croak "Can't read $md5 - $!\n";
                        while (<MD5>) {
                            chomp;
                            $nlines++;
                            next unless (/$distfile/ and /\b([a-f0-9]{32})\b/);
                            if (/^$1\s{2,}$distfile$/) {
                                $line = $_;
                            } else {
                                $line = "$1  $distfile";
                                $reformat = 1;
                            }
                        }
                        close(MD5);
                        if (($reformat or $nlines > 1) and $line) {
                            warn "debug:       reformatting $md5.\n" if $DEBUG;
                            open(MD5, ">$md5") or croak "Can't write to $md5 - $!\n";
                            print MD5 "$line\n";
                            close(MD5);
                        }
                    }
                    # if retrieval not possible or failed, prompt user for it 
                    # unless in batch mode.
                    if (!-f $md5) {
                        if ($options{batch}) {
                            croak "Can't validate $distfile!\n";
                        }
                        print STDERR "\nEnter MD5 checksum for $distfile: ";
                        my $ans = <STDIN>;
                        chomp $ans;
                        open(MD5, ">$md5") or croak "Can't write to $md5 - $!\n";
                        print MD5 "$ans  $distfile\n";
                        close(MD5);
                    }
                }

                # Actually validate the distribution file.
                system "md5sum", "--status", "--check", $md5;
                my $rc = $? >> 8;
                if ($rc) {
                    croak "Invalid MD5 checksum for $distfile ($rc)!\n";
                }
            }
            elsif ($meth eq 'sha1') {
                my $chksum = $distfile . '.sha1';

                # if checksum doesn't exist, try to retrieve it.
                if (!-f $chksum) {
                    warn "debug:       $chksum does not exist locally.\n" if $DEBUG;
                    if (exists $info->{vurl}) {
                        if ($_ = retrieve_URL($info->{vurl}, $chksum)) {
                            # nb: give user chance to continue.
                            warn "Note: can't retrieve '$info->{vurl}' - $_.\n";
                        }
                        # Reformat if necessary.
                        my($line, $nlines, $reformat);
                        open(CHKSUM, $chksum) or croak "Can't read $chksum - $!\n";
                        while (<CHKSUM>) {
                            chomp;
                            $nlines++;
                            next unless (/^([a-f0-9]{40})\b/);
                            if (/^$1\s{2,}$distfile$/) {
                                $line = $_;
                            } else {
                                warn "debug:       need to reformat $chksum.\n" if $DEBUG;
                                $line = "$1  $distfile";
                                $reformat = 1;
                            }
                        }
                        close(CHKSUM);
                        if (($reformat or $nlines > 1) and $line) {
                            warn "debug:       reformatting $chksum.\n" if $DEBUG;
                            open(CHKSUM, ">$chksum") or croak "Can't write to $chksum - $!\n";
                            print CHKSUM "$line\n";
                            close(CHKSUM);
                        }
                    }
                    # if retrieval not possible or failed, prompt user for it 
                    # unless in batch mode.
                    if (!-f $chksum) {
                        if ($options{batch}) {
                            croak "Can't validate $distfile!\n";
                        }
                        print STDERR "\nEnter SHA1 checksum for $distfile: ";
                        my $ans = <STDIN>;
                        chomp $ans;
                        open(CHKSUM, ">$chksum") or croak "Can't write to $chksum - $!\n";
                        print CHKSUM "$ans  $distfile\n";
                        close(CHKSUM);
                    }
                }

                # Actually validate the distribution file.
                system "sha1sum", "--status", "--check", $chksum;
                my $rc = $? >> 8;
                if ($rc) {
                    croak "Invalid SHA1 checksum for $distfile ($rc)!\n";
                }
            }
            elsif ($meth eq 'sha256') {
                my $chksum = $distfile . '.sha256';

                # if checksum doesn't exist, try to retrieve it.
                if (!-f $chksum) {
                    warn "debug:       $chksum does not exist locally.\n" if $DEBUG;
                    if (exists $info->{vurl}) {
                        if ($_ = retrieve_URL($info->{vurl}, $chksum)) {
                            # nb: give user chance to continue.
                            warn "Note: can't retrieve '$info->{vurl}' - $_.\n";
                        }
                        # Reformat if necessary.
                        my($line, $nlines, $reformat);
                        open(CHKSUM, $chksum) or croak "Can't read $chksum - $!\n";
                        while (<CHKSUM>) {
                            chomp;
                            $nlines++;
                            next unless (/^([a-f0-9]{64})\b/);
                            if (/^$1\s{2,}$distfile$/) {
                                $line = $_;
                            } else {
                                warn "debug:       need to reformat $chksum.\n" if $DEBUG;
                                $line = "$1  $distfile";
                                $reformat = 1;
                            }
                        }
                        close(CHKSUM);
                        if (($reformat or $nlines > 1) and $line) {
                            warn "debug:       reformatting $chksum.\n" if $DEBUG;
                            open(CHKSUM, ">$chksum") or croak "Can't write to $chksum - $!\n";
                            print CHKSUM "$line\n";
                            close(CHKSUM);
                        }
                    }
                    # if retrieval not possible or failed, prompt user for it 
                    # unless in batch mode.
                    if (!-f $chksum) {
                        if ($options{batch}) {
                            croak "Can't validate $distfile!\n";
                        }
                        print STDERR "\nEnter SHA256 checksum for $distfile: ";
                        my $ans = <STDIN>;
                        chomp $ans;
                        open(CHKSUM, ">$chksum") or croak "Can't write to $chksum - $!\n";
                        print CHKSUM "$ans  $distfile\n";
                        close(CHKSUM);
                    }
                }

                # Actually validate the distribution file.
                system "sha256sum", "--status", "--check", $chksum;
                my $rc = $? >> 8;
                if ($rc) {
                    croak "Invalid SHA256 checksum for $distfile ($rc)!\n";
                }
            }
            elsif ($meth eq 'sig') {
                my $sig = $distfile . '.asc';

                # if checksum doesn't exist, try to retrieve it.
                if (!-f $sig) {
                    warn "debug:       $sig does not exist locally.\n" if $DEBUG;
                    if (exists $info->{vurl}) {
                        if ($_ = retrieve_URL($info->{vurl}, $sig)) {
                            # nb: give user chance to continue.
                            warn "Note: can't retrieve '$info->{vurl}' - $_.\n";
                        }
                    }
                    # if retrieval not possible or failed, prompt user for it 
                    # unless in batch mode.
                    if (!-f $sig) {
                        if ($options{batch}) {
                            croak "Can't validate $distfile!\n";
                        }
                        print STDERR "Enter GnuPG / PGP signature for $distfile: ";
                        my $ans = <STDIN>;
                        chomp $ans;
                        open(SIG, ">$sig") or croak "Can't write to $sig - $!\n";
                        print SIG "$sig  $distfile\n";
                        close(SIG);
                    }
                }

                # Actually validate the distribution file.
                system "gpg", "--quiet", "--verify", $sig, $distfile;
                my $rc = $? >> 8;
                if ($rc) {
                    croak "Invalid signature for $distfile ($rc)!\n";
                }
                print "\n";
            }
            else {
                croak "Unknown verification method '$meth'!\n";
            }
        }
        else {
            warn "Note: no method known for verifing contents of $distfile.\n";
        }

        # Extract contents of distribution file.
        if (-d $info->{workdir}) {
            warn "Note: $info->{workdir} already exists; $distfile not extracted.\n";
        }
        else {
            # Do any pretextract actions.
            if (exists $info->{preextract}) {
                my $cmd = $info->{preextract};
                my $ans;
                warn "debug:     doing preextract actions '$cmd'.\n" if $DEBUG;
                unless ($options{batch}) {
                    print STDERR "Run '$cmd' (Y/n/b/q)? ";
                    $ans = <STDIN>;
                    exit if ($ans =~ /^q$/i);
                }
                if (defined($ans) and $ans =~ /^b$/i) {
                    $options{batch} = 1;
                    $ENV{'INSTALL_APP_MODE'} = 'batch';
                }
                unless (defined($ans) and $ans =~ /^n$/i) {
                    system $cmd;
                    my $rc = $? >> 8;
                    croak "Preextract actions '$cmd' failed ($rc)!\n" if ($rc);
                }
            }

            # Extract file.
            warn "debug:     extracting distribution file.\n" if $DEBUG;
            my $uncompress;
            if ($distfile =~ /\.(tar\.gz|tgz|Z)$/) {
                $uncompress = "gzcat";
            }
            elsif ($distfile =~ /bz2$/) {
                $uncompress = "bzcat";
            }
            else {
                croak "Don't know how to extract $distfile!\n";
            }
            my $cmd = "$uncompress $distfile | tar tvf -";
            open(CMD, "$cmd 2>&1 |") or croak "Can't run '$cmd' - $!\n";
            my @files;
            while (<CMD>) {
                push(@files, $_);
            }
            close(CMD);
            print "Contents of $distfile:\n",
                join("", @files), 
                "\n";
            unless ($options{batch}) {
                print STDERR "Extract files (Y/n)? ";
                my $ans = <STDIN>;
                exit if ($ans =~ /^n$/i);
            }
            system "$uncompress $distfile | tar xf -";
            my $rc = $? >> 8;
            croak "Can't extract contents of $distfile ($rc)!\n" if ($rc);

            # Do any postextract actions.
            if (exists $info->{postextract}) {
                my $cmd = $info->{postextract};
                my $ans;
                warn "debug:     doing postextract actions '$cmd'.\n" if $DEBUG;
                unless ($options{batch}) {
                    print STDERR "Run '$cmd' (Y/n/b/q)? ";
                    $ans = <STDIN>;
                    exit if ($ans =~ /^q$/i);
                }
                if (defined($ans) and $ans =~ /^b$/i) {
                    $options{batch} = 1;
                    $ENV{'INSTALL_APP_MODE'} = 'batch';
                }
                unless (defined($ans) and $ans =~ /^n$/i) {
                    system $cmd;
                    my $rc = $? >> 8;
                    croak "Postextract actions '$cmd' failed ($rc)!\n" if ($rc);
                }
            }

            warn "debug:     changing ownership of $info->{workdir}.\n" if $DEBUG;
            system "chown", "-R", "$work_uid:$work_gid", $info->{workdir};
            $rc = $? >> 8;
            croak "Can't change ownership of $info->{workdir} ($rc)!\n" if ($rc);
        }

        # Change into working directory.
        chdir $info->{workdir} or croak "Can't chdir to $info->{workdir} - $!\n";

        # Iterate over each step.
        foreach my $step (@{$info->{steps}}) {
            my($desc, $cmd);
            while (($desc, $cmd) = each %$step) {
                warn "debug:     running '$cmd' ($desc).\n" if $DEBUG;
                unless ($options{batch}) {
                    print STDERR "$desc (Y/n/b/q)? ";
                    my $ans = <STDIN>;
                    next if ($ans =~ /^n$/i);
                    exit if ($ans =~ /^q$/i);
                    if (defined($ans) and $ans =~ /^b$/i) {
                        $options{batch} = 1;
                        $ENV{'INSTALL_APP_MODE'} = 'batch';
                    }
                }
                system $cmd;
                my $rc = $? >> 8;
                croak "$desc failed ($rc)!\n" if ($rc);
            }
        }

        # Change back to base directory.
        chdir $info->{basedir} 
            or croak "Can't chdir to $info->{basedir} - $!\n";
    }

    unless ($options{'list-steps'}) {
        # Update XML file w/ version information.
        my $version = XML::Twig::Elt->new('versions');
        XML::Twig::Elt->new(
            'version' => $app_vers
        )->paste('last_child', $version);
        XML::Twig::Elt->new(
            'date' => time
        )->paste('last_child', $version);
        XML::Twig::Elt->new(
            'user' => ($ENV{USERNAME} || $ENV{USER} || 'n/a')
        )->paste('last_child', $version);

        if ($install->first_child('versions')) {
            $version->paste('before', $install->first_child('versions'));
        }
        else {
            $version->paste('after', $install->last_child);
        }

        $twig->set_pretty_print('record');
        my($mode, $uid, $gid) = (stat($app_file))[2, 4, 5];
        my $scratch = "$app_file.$$";
        open(XML, "> $app_file.$$") or croak "Can't write to '$app_file.$$' - $!\n";
        chown $uid, $gid, $scratch;
        chmod $mode, $scratch;
        print XML $twig->sprint;
        close(XML);
        if (-s $scratch) {
            rename $scratch, $app_file;
        }
        else {
            warn "An unknown error occurred updating '$app_file'!\n";
            unlink $scratch;
        }

        print "Install of $app_name $app_vers finished.\n";
    }
}


############################################################################
# Retrieve $url and save it as $file.
#    Returns an empty string on success or an error message on failure.
sub retrieve_URL($$) {
    my($url, $file) = @_;

    if ($DEBUG) {
        warn "debug: retrieving $url in retrieve_URL.\n";
        require LWP::Debug; import LWP::Debug qw(+);
    }

    my $ua = LWP::UserAgent->new(
        agent => $useragent,
        timeout => $timeout,
    );
    if (defined($proxy)) {
        $ua->proxy('http', $proxy);
    }
    my $response = $ua->get(
        $url,
        ':content_file' => $file,
    );
    # Retry FTP retrievals in passive mode if it looks like that will help.
    #
    # nb: 404 generally means the file wasn't found although this also 
    #     happens with Libra FTP daemon 1.2 20010113 accepting only 
    #     passive connections (eg, on ftp.namesys.com). :-(
    if (grep($response->code == $_, (400,404)) and $url =~ /^ftp:/ and $ENV{'FTP_PASSIVE'} == 0) {
        warn "debug: retrying transfer with passive mode in retrieve_URL.\n" if $DEBUG;
        $ENV{'FTP_PASSIVE'} = 1;
        $response = $ua->get(
            $url,
            ':content_file' => $file,
        );
        $ENV{'FTP_PASSIVE'} = 0;
    }
    unless ($response->is_success) {
        return $response->status_line;
    }
    warn "debug: saved contents as '$file' in retrieve_URL.\n" if $DEBUG;
    return "";
}
